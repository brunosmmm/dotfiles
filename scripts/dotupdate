#!/usr/bin/env python3
"""Update dotfiles from current user's home directory."""

import os
import shutil
from argparse import ArgumentParser

from dotutils.git import GitDotfileInspector


def _update(args):
    ins = GitDotfileInspector(args.p, args.home)

    if args.diff is not None:
        try:
            print(ins.diff_file(args.diff))
        except RuntimeError as ex:
            print(f"ERROR: {ex}")
            exit(1)
        exit(0)

    changes = ins.determine_changes()

    if args.quiet is False:
        print("Checking for changes...")
        print(
            "{} files have changed{}".format(
                "No" if not changes else len(changes),
                "" if not changes else ":",
            )
        )
    if not changes:
        exit(0)
    else:
        if args.quiet is False:
            for changed in changes:
                if args.interactive is True:
                    choice = input(f"{changed} [update (u)/skip (s)/diff (d)]?")
                    if choice == "u":
                        shutil.copyfile(
                            changes[changed], changed, follow_symlinks=False
                        )
                    elif choice == "d":
                        print(ins.diff_file(changed))
                        choice = input(f"{changed} [update (u)/skip (s)]?")
                        if choice == "u":
                            shutil.copyfile(
                                changes[changed], changed, follow_symlinks=False
                            )
                        else:
                            print("skipped")
                    else:
                        print("skipped")
                else:
                    print(changed)

    if args.interactive is True:
        # update already occurred
        exit(0)

    if args.quiet is False:
        choice = input("Update repository? [y/n]")
    else:
        choice = "y"

    if choice == "y":
        # update
        for repo_file, user_file in changes.items():
            if os.path.islink(repo_file):
                # leave symlinks alone
                continue
            shutil.copyfile(user_file, repo_file, follow_symlinks=False)
    else:
        print("Aborted")


if __name__ == "__main__":

    parser = ArgumentParser()
    parser.add_argument("p", help="dot files storage path")
    subparsers = parser.add_subparsers(help="sub-commands", dest="cmd")
    update_parser = subparsers.add_parser(
        "update", help="update dotfiles from home directory"
    )
    install_parser = subparsers.add_parser(
        "install", help="install dotfiles to home directory"
    )
    parser.add_argument(
        "--home", help="home directory path", default=os.environ["HOME"]
    )
    group = update_parser.add_mutually_exclusive_group()
    group.add_argument(
        "--quiet", help="quietly update", action="store_true", default=False
    )
    group.add_argument("--diff", help="get diff for a monitored file")
    group.add_argument(
        "--interactive",
        help="update interactively",
        default=False,
        action="store_true",
    )
    args = parser.parse_args()

    if args.cmd is None:
        parser.print_usage()
        exit(0)
    elif args.cmd == "update":
        _update(args)
    elif args.cmd == "install":
        print("Not implemented")
        exit(1)
