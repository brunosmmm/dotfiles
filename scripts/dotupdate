#!/usr/bin/env python3
"""Update dotfiles from current user's home directory."""

import os
import shutil
from argparse import ArgumentParser

from dotutils.git import GitDotfileInspector


def _fatal(err_msg, code=1):
    print(f"FATAL: {err_msg}")
    exit(code)


def _show_diff(inspector, thefile, reverse=False, _exit=True):
    try:
        print(inspector.diff_file(thefile, reverse=reverse))
        if _exit:
            exit(0)
    except RuntimeError as ex:
        _fatal(ex)


def _update_file(user_file, repo_file, reverse=False):
    if reverse:
        shutil.copyfile(repo_file, user_file, follow_symlinks=False)
    else:
        shutil.copyfile(user_file, repo_file, follow_symlinks=False)


def _update_all(changes, reverse=False):
    for repo_file, user_file in changes.items():
        if os.path.islink(repo_file):
            # leave symlinks alone
            continue
        _update_file(user_file, repo_file, reverse)


def _update(args, direction="repo"):
    ins = GitDotfileInspector(args.p, args.home)
    if args.quiet is False:
        print("Checking for changes...")

    if direction not in ("repo", "home"):
        raise ValueError("direction must be either home or repo")
    changes = ins.changes if direction == "repo" else ins.reverse_changes
    reverse = direction == "home"

    if args.quiet is False:
        print(
            "{} files have changed{}".format(
                "No" if not changes else len(changes),
                "" if not changes else ":",
            )
        )
    if not changes:
        # done
        exit(0)

    if args.quiet is False:
        for changed in changes:
            if args.interactive is True:
                choice = input(f"{changed} [update (u)/skip (s)/diff (d)]?")
                if choice == "u":
                    _update_file(changes[changed], changed)
                elif choice == "d":
                    print(ins.diff_file(changed, reverse=reverse))
                    choice = input(f"{changed} [update (u)/skip (s)]?")
                    if choice == "u":
                        _update_file(changes[changed], changed)
                    else:
                        print("skipped")
                else:
                    print("skipped")
            else:
                print(changed)

    if args.interactive is True:
        # update already occurred
        exit(0)

    choice = input("Update repository? [y/n]") if args.quiet is False else "y"

    if choice == "y":
        # update
        _update_all(changes)
    else:
        print("Aborted")


def _inspect(args):
    ins = GitDotfileInspector(args.p, args.home)
    try:
        diff = ins.diff_file(args.fname)
    except:
        raise

    if args.diff:
        print(diff)
    else:
        if diff is None:
            print("No changes")
        else:
            print("File has changed")


if __name__ == "__main__":

    parser = ArgumentParser()
    parser.add_argument("p", help="dot files storage path")
    subparsers = parser.add_subparsers(help="sub-commands", dest="cmd")
    inspect_parser = subparsers.add_parser("inspect", help="inspect files")
    inspect_parser.add_argument("fname", help="file to inspect")
    inspect_parser.add_argument("--diff", action="store_true", help="show diff")
    update_parser = subparsers.add_parser(
        "update", help="update dotfiles from home directory"
    )
    install_parser = subparsers.add_parser(
        "install", help="install dotfiles to home directory"
    )
    parser.add_argument(
        "--home", help="home directory path", default=os.environ["HOME"]
    )
    group = update_parser.add_mutually_exclusive_group()
    group.add_argument(
        "--quiet", help="quietly update", action="store_true", default=False
    )
    group.add_argument(
        "--interactive",
        help="update interactively",
        default=False,
        action="store_true",
    )
    group = install_parser.add_mutually_exclusive_group()
    group.add_argument(
        "--quiet", help="quietly update", action="store_true", default=False
    )
    group.add_argument("--diff", help="get diff for a monitored file")
    group.add_argument(
        "--interactive",
        help="update interactively",
        default=False,
        action="store_true",
    )
    args = parser.parse_args()

    if args.cmd is None:
        parser.print_usage()
        exit(0)
    elif args.cmd == "update":
        _update(args, direction="repo")
    elif args.cmd == "install":
        _update(args, direction="home")
    elif args.cmd == "inspect":
        _inspect(args)
