#!/usr/bin/env python3
"""Update dotfiles from current user's home directory."""

import os
import json
from pathlib import Path
from argparse import ArgumentParser


from dotutils.actions import update, inspect, list_files
from dotutils.exceptions import DotfileException
from dotutils.postactions import (
    POST_ACTION_MGR,
    PostActionMgr,
    make_shell_post_action,
)
from dotutils.messages import error, warning, info


def add_postactions(postactions: dict):
    """Add postactions from configuration."""
    postactions = postactions.get("postactions")
    if postactions is None:
        warning("invalid postaction configuration")
        return

    for postaction in postactions:
        action = postaction.get("action")
        file_ext = postaction.get("file_ext")
        shell_cmd = postaction.get("shell_cmd")
        name = postaction.get("name")
        descr = postaction.get("description")

        if action is None or file_ext is None or shell_cmd is None:
            warning("invalid postaction configuration")
            return
        shell_postaction = make_shell_post_action(
            action, file_ext, shell_cmd, name, descr
        )
        POST_ACTION_MGR.register_postaction(
            PostActionMgr.POSTACTION_UPDATE, shell_postaction
        )


if __name__ == "__main__":

    parser = ArgumentParser()
    parser.add_argument("p", help="dot files storage path")
    subparsers = parser.add_subparsers(help="sub-commands", dest="cmd")
    inspect_parser = subparsers.add_parser("inspect", help="inspect files")
    list_parser = subparsers.add_parser("list", help="list files")
    inspect_parser.add_argument("fname", help="file to inspect")
    inspect_parser.add_argument(
        "--diff", action="store_true", help="show diff"
    )
    parser.add_argument(
        "-s",
        help="output machine readable format when possible",
        action="store_true",
    )
    update_parser = subparsers.add_parser(
        "update", help="update dotfiles from home directory"
    )
    install_parser = subparsers.add_parser(
        "install", help="install dotfiles to home directory"
    )
    install_parser.add_argument(
        "--new-files", help="Install new files", action="store_true"
    )
    parser.add_argument(
        "--home", help="home directory path", default=os.environ["HOME"]
    )
    group = update_parser.add_mutually_exclusive_group()
    group.add_argument(
        "--quiet", help="quietly update", action="store_true", default=False
    )
    group.add_argument(
        "--interactive",
        help="update interactively",
        default=False,
        action="store_true",
    )
    group = install_parser.add_mutually_exclusive_group()
    group.add_argument(
        "--quiet", help="quietly update", action="store_true", default=False
    )
    group.add_argument("--diff", help="get diff for a monitored file")
    group.add_argument(
        "--interactive",
        help="update interactively",
        default=False,
        action="store_true",
    )
    args = parser.parse_args()

    dotupdate_path = Path(__file__).parent.absolute()
    config_path = os.path.join(dotupdate_path, "config")
    postaction_config = os.path.join(config_path, "postactions.json")

    p_real = os.path.realpath(args.p)
    home_real = os.path.realpath(args.home)

    postactions = None
    try:
        with open(postaction_config, "r") as postaction_data:
            postactions = json.load(postaction_data)
    except json.JSONDecodeError:
        warning("malformed json, cannot load postaction configuration")
    except OSError:
        warning("could not open postaction configuration file")

    if postactions is not None:
        add_postactions(postactions)

    if args.cmd is None:
        parser.print_usage()
        exit(0)
    elif args.cmd == "update":
        try:
            update(
                args.p,
                args.home,
                args.interactive,
                args.quiet,
                direction="repo",
            )
        except DotfileException as ex:
            error(str(ex))
            exit(1)
    elif args.cmd == "install":
        try:
            update(
                p_real,
                home_real,
                args.interactive,
                args.quiet,
                direction="home",
                install_new=args.new_files,
            )
        except DotfileException as ex:
            error(str(ex))
            exit(1)
    elif args.cmd == "inspect":
        try:
            ret = inspect(p_real, home_real, args.fname, args.diff)
        except (OSError, DotfileException) as ex:
            error(str(ex))
            exit(1)
        if ret["status"] == "err":
            if args.s:
                print("error")
            else:
                error(ret["err"])
            exit(1)
        elif ret["status"] == "okay":
            if "diff" in ret:
                if args.s:
                    exit(0)
                print(ret["diff"])
                exit(0)
            if "result" in ret:
                if ret["result"]:
                    if args.s:
                        print("modified")
                    else:
                        info("File has been modified")
                else:
                    if args.s:
                        print("unmodified")
                    else:
                        info("File has not been modified")
    elif args.cmd == "list":
        try:
            ret = list_files(p_real, home_real, args.s)
        except (OSError, DotfileException) as ex:
            error(str(ex))
            exit(1)
