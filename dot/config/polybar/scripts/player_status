#!/usr/bin/env python3
"""Get player status and display on polybar."""
import gi

gi.require_version("Playerctl", "2.0")

from gi.repository import Playerctl
from argparse import ArgumentParser
import pickle

PLAY_GLYPH = u"\uf04b"
PAUSE_GLYPH = u"\uf04c"

PLAYER_GLYPHS = {"spotify": u"\uf1bc", "default": u"\uf001"}


def format_time(time):
    """Format time."""
    return "{:02d}:{:02d}".format(
        int(time / 60000000), int((time % 60000000) / 1000000)
    )


if __name__ == "__main__":

    parser = ArgumentParser()
    parser.add_argument(
        "-f", help="output format", default="{artist} - {title}"
    )
    parser.add_argument("-df", default=" ({position}/{duration})")
    parser.add_argument("-t", default=32)
    args = parser.parse_args()

    # get players
    players = Playerctl.list_players()
    players = {
        player.name: Playerctl.Player.new_from_name(player)
        for player in players
    }

    playing = [
        (name, player)
        for name, player in players.items()
        if player.get_property("status") == "Playing"
    ]

    paused = [
        (name, player)
        for name, player in players.items()
        if player.get_property("status") == "Paused"
    ]

    # find player thats playing
    if playing:
        player_name, player_obj = playing[0]
    elif paused:
        player_name, player_obj = paused[0]
    else:
        print("")
        exit(0)

    # get data
    metadata = player_obj.get_property("metadata")
    artist, = metadata["xesam:artist"]
    title = metadata["xesam:title"]
    position = player_obj.get_position()
    position_str = format_time(position)
    duration = metadata["mpris:length"]
    duration_str = format_time(duration)

    # truncate
    if len(title) > int(args.t):
        title = title[0 : int(args.t)]
        title += "..."
        if ("(" in title) and (")" not in title):
            title += ")"

    status = player_obj.get_property("status")
    if status == "Playing":
        play_pause = PLAY_GLYPH
    elif status == "Paused":
        play_pause = PAUSE_GLYPH

    if player_name in PLAYER_GLYPHS:
        player = PLAYER_GLYPHS[player_name]
    else:
        player = PLAYER_GLYPHS["default"]

    # format output string
    output_str = args.f.format(
        artist=artist, title=title, play_pause=play_pause, player=player
    )

    if player_name != "spotify":
        output_str += args.df.format(
            position=position_str, duration=duration_str
        )

    # save state
    try:
        with open("/tmp/playerctl", "w") as ctlfile:
            ctlfile.write(player_name)
    except OSError:
        pass

    print(output_str)
